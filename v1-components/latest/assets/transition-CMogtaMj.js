var l=Object.defineProperty;var a=(r,e,t)=>e in r?l(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var i=(r,e,t)=>a(r,typeof e!="symbol"?e+"":e,t);import"./vue.esm-bundler-CQrfiSSv.js";const f=Symbol("$embedModal"),c=async()=>new Promise(r=>requestAnimationFrame(r));class d{constructor(){i(this,"registry");i(this,"started",!1);this.registry=[]}start(){this.started||(this.started=!0,document.addEventListener("keydown",e=>{if(e.key==="Escape"&&!e.altKey&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey){const t=this.registry.find(s=>!s.isOverlapped());t&&t.emitEscape()}}))}add(e){this.registry.some(t=>t.id===e.id)||(this.registry.push(e),this.refresh())}remove(e){this.registry=this.registry.filter(t=>t.id!==e.id),this.refresh()}replace(e,t){const s=this.registry.findIndex(o=>o.id===e);if(s===-1)throw new Error("[@embed-ui/modal] replace(): layer was not found");this.registry.splice(s,1,t),this.refresh()}refresh(){if(!this.registry.length){this.toggleOverflow();return}let e=!1;for(let t=this.registry.length-1;t>=0;t--)this.registry[t].setIsOverlapped(e),e||(e=this.registry[t].isBlocker());this.toggleOverflow()}toggleOverflow(){const e=document.documentElement.style;this.registry.some(t=>t.isBlocker())?e.overflow="hidden":e.overflow==="hidden"&&e.removeProperty("overflow")}}const g=new d;let n=0;const m=r=>`${r}-${++n}`;export{f as M,g as l,c as n,m as u};
