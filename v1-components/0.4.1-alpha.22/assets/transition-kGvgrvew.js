var o=Object.defineProperty;var n=(s,e,t)=>e in s?o(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>n(s,typeof e!="symbol"?e+"":e,t);import{e as l,o as d,f,g as c,q as p,M as m}from"./vue.esm-bundler-BmdTWJX9.js";const u=l({__name:"UiTransition",props:{name:{type:String,default:"fade"},appear:{type:Boolean,default:!1}},setup(s){return(e,t)=>(d(),f(m,{name:"ui-v1-transition-"+s.name,appear:s.appear},{default:c(()=>[p(e.$slots,"default")]),_:3},8,["name","appear"]))}});u.__docgenInfo={exportName:"default",displayName:"UiTransition",description:"",tags:{},props:[{name:"name",description:"Наименование анимации перехода",type:{name:"string"},defaultValue:{func:!1,value:"'fade'"}},{name:"appear",description:"Запуск анимации перехода при появлении элемента",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],slots:[{name:"default",description:"Разметка, к которой добавляется анимация перехода"}],sourceFiles:["/home/runner/work/embed-ui/embed-ui/packages/v1-components/src/host/components/transition/UiTransition.vue"]};const v=Symbol("$embedModal"),k=async()=>new Promise(s=>requestAnimationFrame(s));class h{constructor(){i(this,"registry");i(this,"started",!1);this.registry=[]}start(){this.started||(this.started=!0,document.addEventListener("keydown",e=>{if(e.key==="Escape"&&!e.altKey&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey){const t=this.registry.find(r=>!r.isOverlapped());t&&t.emitEscape()}}))}add(e){this.registry.some(t=>t.id===e.id)||(this.registry.push(e),this.refresh())}remove(e){this.registry=this.registry.filter(t=>t.id!==e.id),this.refresh()}replace(e,t){const r=this.registry.findIndex(a=>a.id===e);if(r===-1)throw new Error("[@embed-ui/modal] replace(): layer was not found");this.registry.splice(r,1,t),this.refresh()}refresh(){if(!this.registry.length){this.toggleOverflow();return}let e=!1;for(let t=this.registry.length-1;t>=0;t--)this.registry[t].setIsOverlapped(e),e||(e=this.registry[t].isBlocker());this.toggleOverflow()}toggleOverflow(){const e=document.documentElement.style;this.registry.some(t=>t.isBlocker())?e.overflow="hidden":e.overflow==="hidden"&&e.removeProperty("overflow")}}const _=new h;let y=0;const b=s=>`${s}-${++y}`;export{v as M,u as _,_ as l,k as n,b as u};
